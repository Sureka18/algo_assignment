1.Duplicate pair
class Solution {
    public int findDuplicate(int[] nums) {
        Arrays.sort(nums);
        int ans = 0;

        for (int i = 0; i < nums.length - 1; i++) {
            if (nums[i] == nums[i + 1]) {
                ans = nums[i];
            }
        }

        return ans;
    }
}
2.Good pairs
class Solution {
    public int numIdenticalPairs(int[] nums) {
     int counter = 0;

     for(int i = 0; i < nums.length; i++){
         for(int j = i+1; j < nums.length; j++){
             if(nums[i] == nums[j]){
                 counter++;
                }
            }
        }
        return counter;   
    }
}
3.Greatest common divisor
public int findGCD(int[] nums) {
        java.util.Arrays.sort(nums);
        int min=nums[0];
        int max=nums[nums.length-1];
        int rem=0;
        while(max%min!=0){
            rem=max%min;
            max=min;
            min=rem;
        }
        return min;
    }
4.Unique occurences
class Solution {
    public boolean uniqueOccurrences(int[] arr) {
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : arr) {
            map.put(i, map.getOrDefault(i, 0) + 1);
        }
        Set<Integer> set = new HashSet<>();
        for (int i : map.keySet()) {
            if (set.contains(map.get(i))) {
                return false;
            }
            set.add(map.get(i));
        }
        return true;
    }
}
4.Find all duplicate elements
class Solution {
    public List<Integer> findDuplicates(int[] nums) {
        List<Integer> res = new ArrayList<>();
        for (int i = 0; i < nums.length; ++i) {
            int index = Math.abs(nums[i])-1;
            if (nums[index] < 0)
                res.add(Math.abs(index+1));
            nums[index] = -nums[index];
        }
        return res;
    }
}